
/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.util.ElapsedTime;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.LightSensor;


//Red

/**
 * This file illustrates the concept of driving up to a line and then stopping.
 * It uses the common Pushbot hardware class to define the drive on the 
 * The code is structured as a LinearOpMode
 *
 * The code shows using two different light sensors:
 *   The Primary sensor shown in this code is a legacy NXT Light sensor (called "sensor_light")
 *   Alternative "commented out" code uses a MR Optical Distance Sensor (called "sensor_ods")
 *   instead of the LEGO sensor.  Chose to use one sensor or the other.
 *
 *   Setting the correct WHITE_THRESHOLD value is key to stopping correctly.
 *   This should be set half way between the light and dark values.
 *   These values can be read on the screen once the OpMode has been INIT, but before it is STARTED.
 *   Move the senso on asnd off the white line and not the min and max readings.
 *   Edit this code to make WHITE_THRESHOLD half way between the min and max.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="ElmoAutoRed", group="ElmoAutoRed")
public class AutonomousRed extends LinearOpMode {
    //1.5 seconds of spinning at 0.75 = 2 ft.

    public DcMotor leftFront;
    public DcMotor rightFront;
    private DcMotor leftBack;
    private DcMotor rightBack;
    public DcMotor liftArm;
    public DcMotor intake;
    public DcMotor carousel;
    public int auto;

    //private DcMotor intake;
    //public DcMotor carousel;
    ////public DcMotor shooter;
    //public DcMotor wobble;
    DigitalChannel digitalTouch;
    DigitalChannel digitalTouch2;


    static final double FORWARD_SPEED = -0.5;
    static final double REVERSE_SPEED = 0.5;
    static final double COUNTS_PER_MOTOR_REV = 1440;    // eg: TETRIX Motor Encoder
    static final double DRIVE_GEAR_REDUCTION = 2.0;     // This is < 1.0 if geared UP
    static final double WHEEL_DIAMETER_INCHES = 3.5;     // For figuring circumference
    static final double APPROACH_SPEED = 0.5;
    static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double DRIVE_SPEED = -0.6;
    static final double TURN_SPEED = 0.5;

    @Override
    public void runOpMode() {

        /* Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */
        digitalTouch = hardwareMap.get(DigitalChannel.class, "touch1");
        digitalTouch2 = hardwareMap.get(DigitalChannel.class, "touch2");
        leftFront = hardwareMap.dcMotor.get("leftFront");
        rightFront = hardwareMap.dcMotor.get("rightFront");
        leftBack = hardwareMap.dcMotor.get("leftBack");
        rightBack = hardwareMap.dcMotor.get("rightBack");
        intake = hardwareMap.dcMotor.get("intake");
        carousel = hardwareMap.dcMotor.get("carousel");
        liftArm = hardwareMap.dcMotor.get("liftArm");
        digitalTouch.setMode(DigitalChannel.Mode.INPUT);
        digitalTouch2.setMode(DigitalChannel.Mode.INPUT);

        ElapsedTime runtime = new ElapsedTime();

        telemetry.addData("Autonomous Mode Status", "Ready to Run");
        telemetry.update();

        waitForStart();

        //Go towards the block
        leftFront.setPower(0);
        leftBack.setPower(0);
        rightFront.setPower(0);
        rightBack.setPower(0);
        runtime.reset();

        while (opModeIsActive()) {
            while (auto == 0) {
                while (opModeIsActive() && runtime.seconds() < 0.7) {
                    liftArm.setPower(0.6);
                }
                liftArm.setPower(0.1);
                runtime.reset();

                while (opModeIsActive() && (runtime.seconds() < 0.3)) {
                    leftFront.setPower(0.25);
                    leftBack.setPower(0.25);
                    rightFront.setPower(-0.25);
                    rightBack.setPower(-0.25);
                    telemetry.addData("Shuffling", "left");
                    telemetry.update();
                }
                leftFront.setPower(0);
                leftBack.setPower(0);
                rightFront.setPower(0);
                rightBack.setPower(0);
                runtime.reset();

                while (opModeIsActive() && (runtime.seconds() < 0.62)) {
                    leftFront.setPower(-0.75);
                    leftBack.setPower(0.75);
                    rightFront.setPower(-0.75);
                    rightBack.setPower(0.75);
                    telemetry.addData("Shuffling", "left");
                    telemetry.update();
                }
                leftFront.setPower(0);
                leftBack.setPower(0);
                rightFront.setPower(0);
                rightBack.setPower(0);
                runtime.reset();

                while (opModeIsActive() && (runtime.seconds() < 6)) {
                    carousel.setPower(1);
                }
                carousel.setPower(0);
                auto ++;
            }
        }
    }

}


